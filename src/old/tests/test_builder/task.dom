
HTN {
    action A(Agent A, Pickable O, Support S)
    {
        preconditions {
            A >> S.isVisible;
			A >> S.isReachable;
			A.hasInRightHand == O;
        };
        effects {
            FORALL(Agent Ag, {Ag >> O.isVisible;}, {O.isVisible =>> Ag;});
			A.hasInRightHand = Null;
			O.isOn = S;
        };
        cost{cost1()};
		duration{duration1()};
    }

    action B(Agent A, Pickable O, Support S)
    {
        preconditions {
            A >> S.isVisible;
			A >> S.isReachable;
			A.hasInRightHand == O;
        };
        effects {
            FORALL(Agent Ag, {Ag >> O.isVisible;}, {O.isVisible =>> Ag;});
			A.hasInRightHand = Null;
			O.isOn = S;
        };
        cost{cost1()};
		duration{duration1()};
    }

    action C(Agent A, Pickable O, Support S)
    {
        preconditions {
            A >> S.isVisible;
			A >> S.isReachable;
			A.hasInRightHand == O;
        };
        effects {
            FORALL(Agent Ag, {Ag >> O.isVisible;}, {O.isVisible =>> Ag;});
			A.hasInRightHand = Null;
			O.isOn = S;
        };
        cost{cost1()};
		duration{duration1()};
    }

    action D(Agent A, Pickable O, Support S)
    {
        preconditions {
            A >> S.isVisible;
			A >> S.isReachable;
			A.hasInRightHand == O;
        };
        effects {
            FORALL(Agent Ag, {Ag >> O.isVisible;}, {O.isVisible =>> Ag;});
			A.hasInRightHand = Null;
			O.isOn = S;
        };
        cost{cost1()};
		duration{duration1()};
    }


    method Mix(Agent A, Ingredients I, Container C)
    {
        goal{I.mixedIn == C;};
        {
            preconditions{};
            subtasks {
                F = SELECT(Whisk, {F.isReachable == A;});
                1:A(A,I);
                2:B(A,I,C)>1;
                3:C(A,F);
                4:D(A,F,C)>2,>3;
            };
        }
    }


    method CookMeal(Agent A)
    {
        goal{A.isDoing = CookMeal;};
        {
            preconditions{A.inIn == Kitchen;};
            subtasks{
                1: A(A);
                2: B(A);
                3: C(A);
            };

        }
    }




}

// ----------------------------------------------

timePart { priority = 0; }

